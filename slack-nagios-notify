#!/usr/bin/perl
use strict;

use HTTP::Request::Common qw(POST);
use LWP::UserAgent;
use JSON;
use Getopt::Long;

my $token = 'XXXX';                 # from Incoming Webhooks Integration
my $default_channel = '#technical'; # override with -C flag.

my ($channel,$users,$type,$host,$service,$timestamp,$serviceState,$hostState,$output,$srvAckAuthor,$srvAckComment,$hosAckAuthor,$hosAckComment);

GetOptions( "channel=s"       => \$channel,       # slack channel name  $CONTACTEMAIL$
            "token=s"         => \$token,         # slack integration token
            "users=s"         => \$users,         # slack mentions      $CONTACTPAGER$
            "type=s"          => \$type,          # notification type   $NOTIFICATIONTYPE$
            "host=s"          => \$host,          # host name           $HOSTNAME$
            "service=s"       => \$service,       # service desc        $SERVICEDESC$
            "timestamp=s"     => \$timestamp,     # timestamp           $SHORTDATETIME$
            "servicestate=s"  => \$serviceState,  # service state       $SERVICESTATE$
            "hoststate=s"     => \$hostState,     # host state          $HOSTSTATE$
            "output=s"        => \$output,        # service output      $SERVICEOUTPUT$
            "srvackauthor=s"  => \$srvAckAuthor,  # srv ack author      $SERVICEACKAUTHOR$
            "srvackcomment=s" => \$srvAckComment, # srv ack comment     $SERVICEACKCOMMENT$
            "hosackauthor=s"  => \$hosAckAuthor,  # host ack author     $HOSTACKAUTHOR$
            "hosackcomment=s" => \$hosAckComment, # host ack comment    $HOSTACKCOMMENT$
        );


my $payload = {
           channel => $channel // $default_channel,
           username => 'Icinga',
           icon_emoji => ':construction:',
           text =>  "Icinga notification $users: *$type*" ,
           link_names => 1,
             };

if ($type eq '') {
  die "must specify -t\n";

} elsif ($type eq 'PROBLEM') {
  $payload->{text} .= ' :scream:';
  $payload->{attachments} = [
    {
      fallback => "$timestamp: $host/$service $hostState/$serviceState $output",
      text => "$timestamp: $host/$service $hostState/$serviceState",
      color => 'danger',
      fields => [
        {
          title => 'State',
          value => $serviceState,
          short => 'false',
        },
        {
          title => 'Detail',
          value => $output,
          short => 'false',
        }
      ],                        # fields
    },                          # attachment 1
  ];

} elsif ($type eq 'RECOVERY') {
  $payload->{text} .= ' :smiley:';
  $payload->{attachments} = [
    {
      fallback => "$timestamp: $host/$service $hostState/$serviceState $output",
      text => "$timestamp: $host/$service $hostState/$serviceState",
      color => 'good',
      fields => [
        {
          title => 'Detail',
          value => $output,
          short => 'false',
        }
      ],                        # fields
    },                          # attachment 1
  ];
} else { # something unknown, just display it flat.
  # $payload->{color} = 'danger';
  # $payload->{text} = "$opts{t} $opts{a}/$opts{d} $opts{w} State: $opts{s} $opts{o} $opts{u} $opts{c}";
}


my $ua = LWP::UserAgent->new;
$ua->timeout(15);

my $req = POST("https://hooks.slack.com/services/${token}", ['payload' => encode_json($payload)]);

my $resp = $ua->request($req);

if ($resp->is_success) {
  #print $resp->decoded_content;  # or whatever
}
else {
  print $resp->decoded_content;  # or whatever
  die $resp->status_line;
}
exit(0);
