#!/usr/bin/perl
use strict;

use HTTP::Request::Common qw(POST);
use LWP::UserAgent;
use JSON;
use Getopt::Long;

my $token = 'XXXX';                 # from Incoming Webhooks Integration
my $default_channel = '#technical'; # override with -C flag.

my ($color,$target,$channel,$users,$type,$host,$service,$timestamp,$serviceState,$hostState,$output,$srvAckAuthor,$srvAckComment,$hosAckAuthor,$hosAckComment);

GetOptions( "channel=s"       => \$channel,       # slack channel name  $CONTACTEMAIL$
            "token=s"         => \$token,         # slack integration token
            "target=s"        => \$target,        # notification target - host or service
            "users=s"         => \$users,         # slack mentions      $CONTACTPAGER$
            "type=s"          => \$type,          # notification type   $NOTIFICATIONTYPE$
            "host=s"          => \$host,          # host name           $HOSTNAME$
            "service=s"       => \$service,       # service desc        $SERVICEDESC$
            "timestamp=s"     => \$timestamp,     # timestamp           $SHORTDATETIME$
            "servicestate=s"  => \$serviceState,  # service state       $SERVICESTATE$
            "hoststate=s"     => \$hostState,     # host state          $HOSTSTATE$
            "output=s"        => \$output,        # service output      $SERVICEOUTPUT$
            "srvackauthor=s"  => \$srvAckAuthor,  # srv ack author      $SERVICEACKAUTHOR$
            "srvackcomment=s" => \$srvAckComment, # srv ack comment     $SERVICEACKCOMMENT$
            "hosackauthor=s"  => \$hosAckAuthor,  # host ack author     $HOSTACKAUTHOR$
            "hosackcomment=s" => \$hosAckComment, # host ack comment    $HOSTACKCOMMENT$
        );

my $mention;
$mention = "$users icinga notification: *$type*" if($users ne '');

my $payload = {
                channel => $channel // $default_channel,
                username => 'Icinga',
                icon_emoji => ':construction:',
                text =>  $mention,
                link_names => 1,
              };

if ($type eq '' or $target eq '') {
    die "must specify type and target\n";
} elsif ($type eq 'PROBLEM') {
    if ($target eq 'HOST') {
        $color = '#000000';
    } elsif ($target eq 'SERVICE') {
        $color = 'danger';
    }
} elsif ($type eq 'RECOVERY') {
    $color = 'good';
} elsif ($type eq '') {
}

if ($target eq 'HOST') {
    $payload->{attachments} = [{
        fallback => "$timestamp: $host $hostState $output",
        title => "$timestamp: Host $host is $hostState",
        color => $color
    }];
} elsif ($target eq 'SERVICE') {
    $payload->{attachments} = [{
        fallback => "$timestamp: $host/$service $serviceState $output",
        title => "$timestamp: Service $service on $host is $serviceState",
        color => $color,
        fields => [
            {
                title => 'State',
                value => $serviceState,
                short => 'short',
            },
            {
                title => 'Detail',
                value => $output,
                short => 'false',
            }
          ],
    }];
}

my $ua = LWP::UserAgent->new;
$ua->timeout(15);

my $req = POST("https://hooks.slack.com/services/${token}", ['payload' => encode_json($payload)]);

my $resp = $ua->request($req);

if ($resp->is_success) {
  #print $resp->decoded_content;  # or whatever
}
else {
  print $resp->decoded_content;  # or whatever
  die $resp->status_line;
}
exit(0);
